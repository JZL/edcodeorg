// File: utilities.gas
// Description: 
// This file contains helper functions for a variety of purposes, as
// well as the functions that handle script installation and menu setup.

// gbl_land_id: identifies the language in the UI.
gbl_lang_id = "";

// rowCache
rc = null;

// onInstall: 
 // Gets called when script is first installed.
 // Sets up menu (really just calls onOpen() ).
 function onInstall(e)
 {
   onOpen(e);
   
   showNewVersionNotice();
 }  
   
 // onOpen:
 // Gets called when the spreadsheet is opened.
 // Sets up the menu and shows a notification.
 function onOpen(e)
 {
   if (e && e.authMode == ScriptApp.AuthMode.NONE)
     {
       // Script is present in a sheet where it hasn't been used yet.
       // (added as an Add-On in a different sheet where it *was* used).
       // This is needed to ensure we don't try to read properties.
       createNonAuthMenu();
     }
   
   else
     {
       createFlubarooMenu();
      
       // Rename "Sheet1" something more friendly to enhance useability.
       //var status = renameSubmissionsSheet();  // moved to gradeStep1 for consistency with NonAuth case
     }
 }

function onEnable(e) 
{
  onOpen(e);
}


// justUpgradedThisSheet:
// Returns true if this is the first time user has upgraded to or installed
// a new version of Flubaroo in this spreadsheet.
function justUpgradedThisSheet()
{
  var dp = PropertiesService.getDocumentProperties();
  
  // Let the user know if this is a new version.
  var sver = dp.getProperty(DOC_PROP_SHEET_INSTALLED_VERSION);
  
  // new version doesn't get set in properties until assignment
  // is first graded after upgrading.
  if ((sver == null) || (sver != gbl_version_str))
    {
      return true;
    }
  
  return false;
}

// justUpgradedFirstTime:
// Returns true if this is the first time the user has upgrade to or installed a new
// version of Flubaroo.
function justUpgradedFirstTime()
{
  var up = PropertiesService.getUserProperties();
  
  var uver = up.getProperty(USER_PROP_LATEST_VERSION_INSTALLED);
  
  // new version doesn't get set in properties until assignment
  // is first graded after upgrading.
  if ((uver == null) || (uver != gbl_version_str))
    {
      return true;
    }
  
  return false;
}


// createNonAuthMenu:
// We're in the case when this Add-On hasn't yet been used in the sheet, even though
// it's been approved in another sheet. So all we're able to do is setup a menu (i.e.
// can't read properties, etc). Setup a simple English menu, since we can't lookup their lang.
function createNonAuthMenu()
{    
  var menuEntries = [];
   
  var ui = SpreadsheetApp.getUi();
  var menu = ui.createMenu(gbl_menu_name);
   
  menu.addItem(langstr_en("FLB_STR_MENU_GRADE_ASSIGNMENT"), "gradeStep1");
  menu.addSeparator(); // line break
  menu.addItem(langstr_en("FLB_STR_MENU_SET_LANGUAGE"), "setLanguage");
  menu.addItem(langstr_en("FLB_STR_MENU_ABOUT"), "aboutFlubaroo");
  menu.addToUi();
}

function createFlubarooMenu()
 {   
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var dp = PropertiesService.getDocumentProperties();
  
   var grades_present = false;
   
   if (getSheetWithGrades(ss) != null)
     {
       grades_present = true;
     }
    
   var menuEntries = [];
   
   var ui = SpreadsheetApp.getUi();
   var menu = ui.createMenu(gbl_menu_name);
   
   // Only show "Re-grade, Email Grade, View Report, etc, if (a) Grades sheet is present and
   // (b) user didn't just upgrade to a new version of Flubaroo in this sheet. If they just upgraded,
   // assignment must be re-graded first, incase format of Grades sheet is different in new version.
   if (grades_present && !justUpgradedThisSheet())
     {
       menu.addItem(langstr("FLB_STR_MENU_REGRADE_ASSIGNMENT"), "gradeStep1");
       menu.addItem(langstr("FLB_STR_MENU_EMAIL_GRADES"), "emailGrades");
       
       menu.addItem(langstr("FLB_STR_MENU_VIEW_REPORT"), "viewReport");
             
       menu.addSeparator(); // line break
       
       if (helpTipsHidden())
         {
           menu.addItem(langstr("FLB_STR_MENU_EDIT_HELP_TIPS"), "toggleHelpTips");
         }
       else
         {
           menu.addItem(langstr("FLB_STR_MENU_HIDE_HELP_TIPS"), "toggleHelpTips");
         }
 
       var col_hidden = dp.getProperty(DOC_PROP_STUDENT_FEEDBACK_HIDDEN);
       if (col_hidden == "true")
         {
           menu.addItem(langstr("FLB_STR_MENU_EDIT_FEEDBACK"), "toggleFeedback");
         }
       else
         {
           menu.addItem(langstr("FLB_STR_MENU_HIDE_FEEDBACK"), "toggleFeedback");
         }
     }
   else
     {
       menu.addItem(langstr("FLB_STR_MENU_GRADE_ASSIGNMENT"), "gradeStep1");
     }
   
   menu.addSeparator(); // line break
   menu.addItem(langstr("FLB_STR_MENU_SET_LANGUAGE"), "setLanguage");
   menu.addItem(langstr("FLB_STR_MENU_ABOUT"), "aboutFlubaroo");  

   menu.addToUi(); 
 }


 // createPleaseWaitUI:
 // Creates a simple UI instructing the teacher to wait while their
 // assignment is being graded. This UI will be replaced once grading
 // completes.
 function aboutFlubaroo()
 {  
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var app = UiApp.createApplication()
                      .setTitle(langstr("FLB_STR_MENU_ABOUT"))
                      .setWidth("500").setHeight("200");
  
   // create the main panel to hold all content in the UI for this step,
   var main_panel = app.createVerticalPanel()
                       .setStyleAttribute('border-spacing', '10px');
   app.add(main_panel);
 
   var hpanel_main = app.createHorizontalPanel()
                .setStyleAttribute('border-spacing', '10px');
   var vpanel1 = app.createVerticalPanel()
                .setStyleAttribute('border-spacing', '10px');
   
   // add a top level hpanel for instructions and picture
   var vpanel1 = app.createVerticalPanel()
       .setStyleAttribute('border-spacing', '10px')
       .add(app.createImage(FLUBAROO_WELCOME_IMG_URL));
   
   
   var vpanel2 = app.createVerticalPanel()
                .setStyleAttribute('border-spacing', '10px');
   
   var hpanel_r_top = app.createHorizontalPanel()
                         .setStyleAttribute('border-spacing', '3px')
                         .add(app.createLabel("Flubaroo - " + gbl_version_str));
   var hpanel_r_mid = app.createHorizontalPanel()
                         .setStyleAttribute('border-spacing', '3px')
                         .add(app.createLabel(langstr("FLB_STR_ABOUT_FLUBAROO_MSG1")));
   var hpanel_r_bot = app.createHorizontalPanel()
                         .setStyleAttribute('border-spacing', '3px')
                         .add(app.createLabel(langstr("FLB_STR_ABOUT_FLUBAROO_MSG2")));
   vpanel2.add(hpanel_r_top);
   vpanel2.add(hpanel_r_mid);
   vpanel2.add(hpanel_r_bot);
    
     
   hpanel_main.add(vpanel1);
   hpanel_main.add(vpanel2);
 
   main_panel.add(hpanel_main);
 
   ss.show(app);
   
   logAboutFlubaroo();
 }
 
function toggleFeedback()
{
  var dp = PropertiesService.getDocumentProperties();
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var grades_sheet = getSheetWithGrades(ss);
  
  var num_stud_identifiers = dp.getProperty(DOC_PROP_NUM_STUDENT_IDENTIFIERS);
  
  var metric_start_col = 2 + parseInt(num_stud_identifiers);
  var feedback_col_num =  metric_start_col + METRIC_STUDENT_FEEDBACK;
  var col_hidden = dp.getProperty(DOC_PROP_STUDENT_FEEDBACK_HIDDEN);
  
  if (col_hidden == "true")
    {
      ss.setActiveSheet(grades_sheet);
      grades_sheet.showColumns(feedback_col_num);
      var range = grades_sheet.getRange(gbl_grades_start_row_num +1, feedback_col_num);
      grades_sheet.setActiveSelection(range);
      dp.setProperty(DOC_PROP_STUDENT_FEEDBACK_HIDDEN, "false");
    }
  else
    {
      grades_sheet.hideColumns(feedback_col_num);
      dp.setProperty(DOC_PROP_STUDENT_FEEDBACK_HIDDEN, "true");
    }
  
  createFlubarooMenu();
}


function helpTipsHidden()
{
  var dp = PropertiesService.getDocumentProperties();
  
  var ht_hidden = dp.getProperty(DOC_PROP_HELP_TIPS_HIDDEN);
  if (ht_hidden == null)
    {
      // handle first case when not set yet.
      ht_hidden = "true";
    }
  
  if (ht_hidden == "true")
    {
      return true;
    }
  else
    {
      return false;
    }
}

function toggleHelpTips()
{
  var dp = PropertiesService.getDocumentProperties();
   
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var subm_sheet = getSheetWithSubmissions(ss);
  
  var num_stud_identifiers = dp.getProperty(DOC_PROP_NUM_STUDENT_IDENTIFIERS);
  
  var tips_present = false;
  if (getTipsRow(subm_sheet) != null)
    {
      tips_present = true;
    }
  
  if (helpTipsHidden())
    {
      // unhide or insert Help Tips row
      ss.setActiveSheet(subm_sheet);
      dp.setProperty(DOC_PROP_HELP_TIPS_HIDDEN, "false");

      if (tips_present)
        {
          subm_sheet.showRows(2);
        }
      else
        {
          subm_sheet.insertRowAfter(1);
        }
      
      var range = subm_sheet.getRange("B2");
      subm_sheet.setActiveSelection(range);
    }
  else
    {
      // hide it, if it exists
      if (tips_present)
        {
          subm_sheet.hideRows(2);
        }
      dp.setProperty(DOC_PROP_HELP_TIPS_HIDDEN, "true");
    }
  
  createFlubarooMenu();
}


// strTrim:
// Trims the whitespace before and after the string.
// Necessary b/c sometimes cells from Form submissions have extra whitespace
// at the beginning for some reason, leading to "wrong" answers when graded.
function strTrim(str) {
  return str.replace(/^\s+|\s+$/g,"");
}

 // setCellValue:
 // Given a reference to a sheet, and a row and column number (starts  
 // from 1), writes the value given into the cell specified by the row
 // and column.
 function setCellValue(sheet, row, col, value)
 {
   single_cell = sheet.getRange(row, col, 1, 1);
   single_cell.setValue(value);
 }
 
 // getCellValue
 // Given a reference to a sheet, and a row and column number (starts
 // from 1), returns the value given in the cell specified by the row
 // and column.
 function getCellValue(sheet, row, col)
 {
   var single_cell = sheet.getRange(row, col, 1, 1);
   return single_cell.getValue();
 }
 
 // setCellColor
 // Given a reference to a sheet, and a row and column number (starts  
 // from 1), changes the background color (to the value specified)
 // for the cell in the row and col given.
 function setCellColor(sheet, row, col, color)
 {
   single_cell = sheet.getRange(row, col, 1, 1);
   single_cell.setBackgroundColor(color);
 }
   
function singleRowToArray(sheet, row_num, num_cols)
 {
   if (rc == null)
     {
       rc = new rowCache(SpreadsheetApp.getActiveSpreadsheet());
     }
   
   if (num_cols == -1)
     {
       num_cols = sheet.getLastColumn();
     }
 
   return rc.getRow(sheet, row_num, num_cols);
 }

// writeArrayToRow:
// Given an array of values, writes it out to the row of the sheet specified.
// Row ids start from 1. Note that this will override any pre-existing content
// in the affected cells of that row.
// The row need not exist ahead of time.
function writeArrayToRow(sheet, row_num, start_col, row_values, bold, color)
{
   var row_range = sheet.getRange(row_num, 1, start_col, row_values.length);
   var set_of_rows = new Array(1);
   set_of_rows[0] = row_values;
  
   if (bold)
     {
       row_range.setFontWeight("bold");
     }
   if (color)
     {
       row_range.setBackgroundColor(color);
     }
  
    row_range.setValues(set_of_rows);
}


 // floatToPrettyText:
 // Takes a float like 22.123456789 and returns "22.12".
 // Note: this function will return 2 digits past the decimal, but will
 // do so without rounding.
 function floatToPrettyText(f)
 {
   s1 = f + ""; // float to string
   sp = s1.split("."); // split at decimal
 
   s2 = sp[0] + ".";
   if (sp.length > 1)
     {
       s2 = s2 + sp[1].substring(0,2);
     }
   else
     {
       s2 = s2 + "00";
     }
 
   return s2;
 }
 
 // renameSubmissionsSheet:
 // Rename "Sheet1" to something more friendly to enhance useability. When
 // looking for the submissions in the future, we'll refer to the spreadsheet
 // with this name.
 // TODO: Make sure this doesn't prevent future submissions
 // Returns:
 //    STATUS_OK if rename successful.
 //    STATUS_NOT_FOUND if 'Sheet1' sheet not present.
 //    STATUS_NO_EFFECT if 'Sheet1' had previously been renamed, and so another
 //      rename wasn't done.
 function renameSubmissionsSheet()
 {
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var sheet = ss.getSheetByName(langstr("FLB_STR_SHEETNAME_STUD_SUBM"));
   if (sheet)
     {
       // sheet has already been renamed.
       return STATUS_NO_EFFECT;
     }
   
   // for non-english languages, try with the older (english) style name.
   // might still be laying around from when they changed languages.
   var sheet = ss.getSheetByName(gbl_subm_sheet_name);
   if (sheet)
     {
       // sheet has already been renamed.
       return STATUS_NO_EFFECT;
     }
   
   var all_sheets = ss.getSheets();
   if (all_sheets.length == 1)
     {
       // Only 1 sheet. Assume it has the student submissions, and
       // rename it to something more friendly (and which we can refer
       // to later).
       sheet = all_sheets[0];
       sheet.setName(langstr("FLB_STR_SHEETNAME_STUD_SUBM"));
       return STATUS_OK;
     }
   else if (all_sheets.length > 1)
     {
       // More than one sheet. If can find "Form Responses 1", assume this one has
       // the submissions and rename it.
       sheet = ss.getSheetByName("Form Responses 1");
       if (sheet != null)
         {
           // Rename to something more friendly.
           sheet.setName(langstr("FLB_STR_SHEETNAME_STUD_SUBM"));
           return STATUS_OK;
         }
     }
   
   // Can't locate sheet with submissions. Tell the user.
   return STATUS_NOT_FOUND;
 }

// getTipsRow:
function getTipsRow(subm_sheet)
{
  if (subm_sheet.getLastRow() < 2)
    {
      return null;
    }
  
  var help_tips_vals = singleRowToArray(subm_sheet,
                                        2,
                                        getNumQuestionsFromSubmissions(subm_sheet));

  if (help_tips_vals[0] != "")
    {
      return null;
    }
  
  return help_tips_vals;
}


function createGATrackingUrl(encoded_page_name)
{
  var utmcc = createGACookie();
  
  if (utmcc == null)
    {
      return null;
    }
 
  var ga_url1 = "http://www.google-analytics.com/__utm.gif?utmwv=5.2.2&utmhn=www.flubaroo-analytics.com&utmcs=-&utmul=en-us&utmje=1&utmdt&utmr=0=";
  var ga_url2 = "&utmac=UA-22064161-3&utmcc=" + utmcc + "&utmu=DI~";
  var ga_url_full = ga_url1 + encoded_page_name + "&utmp=" + encoded_page_name + ga_url2;
  
  return ga_url_full;
}

function createGACookie()
{
  var up = PropertiesService.getUserProperties();
  
  var a = "";
  var b = "100000000";
  var c = "200000000";
  var d = "";

  var dt = new Date();
  var ms = dt.getTime();
  var ms_str = ms.toString();
 
  var flubaroo_uid = up.getProperty("flubaroo_uid");
  if ((flubaroo_uid == null) || (flubaroo_uid == ""))
    {
      // shouldn't happen unless user explicitly removed flubaroo_uid from properties,
      // or hasn't graded yet.
      return null;
    }
  
  a = flubaroo_uid.substring(0,9);
  d = flubaroo_uid.substring(9);
  
  utmcc = "__utma%3D451096098." + a + "." + b + "." + c + "." + d 
          + ".1%3B%2B__utmz%3D451096098." + d + ".1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B";
 
  return utmcc;
}

function logGrading(ss_name)
{
  if (ss_name.indexOf('Geography 10 - Quiz #2') == -1)
    {
      // probably not the "try it now" sample. so anonymously record that another
      // assignment was graded!
      var ga_url = createGATrackingUrl("Assignment%20Graded");
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
            
      // log grading for this specific version (to track fragmentation of versions)      
      var ga_url = createGATrackingUrl(encodeURIComponent(gbl_version_str));
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
      
      logActiveUserGrading();
    }
  else // sample assignment
    {
      var ga_url = createGATrackingUrl("Sample%20Graded");
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
    }
}

function logActiveUserGrading()
{
  var up = PropertiesService.getUserProperties();
  
  // track 30 day actives using month. to be counted as an active,
  // user, user must grade at least 1 assignment during the month.
  // we also check that the lifetime usage > 4, to filter out
  // people just playing around with or testing out Flubaroo.
  var track_month = up.getProperty(USER_PROP_GRADE_MONTH);
  var track_month_count = up.getProperty(USER_PROP_GRADE_MONTH_COUNT);
  var track_lifetime_count = up.getProperty(USER_PROP_GRADE_LIFETIME_COUNT);
      
  var d = new Date();
  var current_month = (d.getMonth() + 1).toString();
      
  // init if never setup
  if (track_month == null)
    {
      track_month = current_month;
    }
  if (track_month_count == null)
    {
      track_month_count = "0";
    }
  if (track_lifetime_count == null)
    {
      track_lifetime_count = "0";
    }
            
  if (current_month == track_month)
    {
      track_month_count = parseInt(track_month_count);
      track_month_count++;
      track_month_count = track_month_count.toString();
    }
  else
    {
      track_month = current_month;
      track_month_count = "1"; // start over
    }
  
  track_lifetime_count = parseInt(track_lifetime_count);
  track_lifetime_count++;
  track_lifetime_count = track_lifetime_count.toString();
      
  up.setProperty(USER_PROP_GRADE_MONTH, track_month);
  up.setProperty(USER_PROP_GRADE_MONTH_COUNT, track_month_count);
  up.setProperty(USER_PROP_GRADE_LIFETIME_COUNT, track_lifetime_count);
  
  // log once and only once per month
  if ((track_lifetime_count > 4) && (track_month_count == "1"))
    {  
      var ga_url = createGATrackingUrl("Active%20Monthly%20Users"); 
      if (ga_url)
        {
          var response = UrlFetchApp.fetch(ga_url);
        }
    }
}

function logEmail()
{
  var ga_url = createGATrackingUrl("Emailed%20Grades");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

function logAboutFlubaroo()
{
  var ga_url = createGATrackingUrl("About%20Flubaroo");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

function logFirstInstall()
{
  var ga_url = createGATrackingUrl("First%20Install");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

function logRepeatInstall()
{
  var ga_url = createGATrackingUrl("Repeat%20Install");
  if (ga_url)
    {
      var response = UrlFetchApp.fetch(ga_url);
    }
}

// setCurrentVersionInfo:
// Called just before grading occurs. So new version isn't set after install
// until after first grade.
function setCurrentVersionInfo()
{
  var dp = PropertiesService.getDocumentProperties();
  var up = PropertiesService.getUserProperties();
  
  var sver = dp.getProperty(DOC_PROP_SHEET_INSTALLED_VERSION);
  if ((sver == null) || (sver != gbl_version_str))
    {
      dp.setProperty(DOC_PROP_SHEET_INSTALLED_VERSION, gbl_version_str);
    }

  // take note of the latest version the user has installed across all sheets.
  // used to show user version update notice.
  var uver = up.getProperty(USER_PROP_LATEST_VERSION_INSTALLED);
  if ((uver == null) || (uver != gbl_version_str))
    {
      up.setProperty(USER_PROP_LATEST_VERSION_INSTALLED, gbl_version_str);
    }
}

function setFlubarooUid()
{ 
  var up = PropertiesService.getUserProperties();

  var flubaroo_uid = up.getProperty("flubaroo_uid");
  if (flubaroo_uid == null || flubaroo_uid == "")
    {
      // user has never installed Flubaroo before (in any spreadsheet)
      var dt = new Date();
      var ms = dt.getTime();
      var ms_str = ms.toString();
 
      up.setProperty("flubaroo_uid", ms_str);
      logFirstInstall();
    }
}

function showNewVersionNotice()
{
  // check if this is the first time the user has upgrade to or installed a new
  // version of Flubaroo. if so, just this once, we'll show them a message.
  if (justUpgradedFirstTime())
    {
      if (gbl_show_version_update_notice && (langstr("FLB_STR_NEW_VERSION_NOTICE") != ""))
        {
          Browser.msgBox("New Flubaroo Version!", langstr("FLB_STR_NEW_VERSION_NOTICE"),
                         Browser.Buttons.OK);
        }
    }
}

function customLogClear()
{
  if (!gbl_do_logging)
    {
      return;
    }
  
  Logger.clear();
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("log");
  
  if (sheet)
    {
      sheet.deleteRows(2, sheet.getMaxRows() - 1);
    }
  
  sheet.insertRowsAfter(1, 5);
}

function customLog(msg)
{
  if (!gbl_do_logging)
    {
      return;
    }
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("log");
  
  // currently broken
  Logger.log(msg);

  if (sheet)
    {
      var row = sheet.getLastRow();
      row = row + 1;
      var single_cell = sheet.getRange(row, 1, 1, 1);
      single_cell.setValue(msg);
    }
}

// rowCache:
// This object speeds reading of rows in a spreadsheet by reading not only the requested
// row, but also the next 9 (for 10 total). Batching row reads is much faster than reading
// individual ones, especially when reading through all rows in a sheet. 
// It keeps a seperate cache for each sheet. The cache per sheet is of size 1, such that
// if a cache miss occurs, the current 10 rows in the cache are kicked out.
function rowCache(ss)
{
  this.ss = ss;
  this.cache = new Array(); // indexed by sheet_index  
}

rowCache.prototype.getRow = function(sheet, row_num, num_cols)
{
  var sheet_index = sheet.getIndex();
  
  // check if this sheet has an entry or not.
  if (!(sheet_index in this.cache))
    {
      this.cache[sheet_index] = new Array();
    }
     
  var row_cache = this.cache[sheet_index];
   
  // check for this row in the cache
  if (!(row_num in row_cache)
      || (row_cache[row_num].length != num_cols))
    {
      // when a row cache miss occurs, clear all rows in the cache
      this.cache[sheet_index] = null;

      // create new assoc array. index will be row num. 10 entries.
      row_cache = new Array();
            
      // read in the needed row, plus the next 9 (10 total)
      var range = sheet.getRange(row_num, 1, 10, num_cols);
      
      var range_vals = range.getValues();
      
      for (var r=0; r < range.getNumRows(); r++)
        {
          // record the data for this row, indexed by row_number
          row_cache[row_num+r] = range_vals[r];
        }
      
      // record it for the sheet_id
      this.cache[sheet_index] = row_cache;

    }
 
  // lookup and return the row, which is now in the cache
  return row_cache[row_num];
};


function setLanguage()
{
   customLogClear();
   
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var app = UiApp.createApplication()
                      .setTitle(langstr("FLB_STR_MENU_SET_LANGUAGE"))
                      .setWidth("230").setHeight("100");

   var handler = app.createServerClickHandler('setLanguageHandler');
  
   // create the main panel to hold all content in the UI for this step,
   var main_panel = app.createVerticalPanel()
                       .setStyleAttribute('border-spacing', '10px');
   app.add(main_panel);
  
   ss.show(app);
 
   // create a pull-down box containing all the questions which identify a
   // student. 
   var lbox_name = "language_select";
   var lbox = app.createListBox(false).setId(lbox_name).setName(lbox_name);
   var position = -1;
   
   for (var item in langs)
     {
       lbox.addItem(langs[item]["FLB_LANG_IDENTIFIER"], item);
     }
   
   lbox.setSelectedIndex(0);    
   handler.addCallbackElement(lbox);  
  
    var hpanel = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '6px')
    .add(app.createLabel(langstr("FLB_STR_MENU_SET_LANGUAGE") + ":"))
       .add(lbox);
   main_panel.add(hpanel);

   var btnSubmit = app.createButton(langstr("FLB_STR_BUTTON_CONTINUE"),handler).setId('CONTINUE');
  
   main_panel.add(btnSubmit);
 
   ss.show(app);   
 }

function setLanguageHandler(e)
 {
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   var app = UiApp.getActiveApplication();

   var up = PropertiesService.getUserProperties();
   
   var language_id = e.parameter.language_select;
 
   up.setProperty(USER_PROP_LANGUAGE_ID, language_id);
   
   // reload menu
   createFlubarooMenu();
   
   // rename Student Submissions sheet, if it was already set to an English name.
   //renameSubmissionsSheet();
   
   app.close()
   return app;
 }


// langstr: Given a string id, returns the localized version of that string, based on the global gbl_lang_id.
function langstr(id)
{
  var up = PropertiesService.getUserProperties();
  
  if (gbl_lang_id == "")
    {
      // not yet defined. look it up!
      gbl_lang_id = up.getProperty(USER_PROP_LANGUAGE_ID);
      
      if (gbl_lang_id == "" || gbl_lang_id == null || gbl_lang_id === undefined)
        {
          // never explicitly set by user (via menu). set to default.
          gbl_lang_id = "en-us"; // default
        }
    }
  
  // Return the specified string in the language selected. if not defined, return the English version.
  if (langs[gbl_lang_id][id])
    {
      return langs[gbl_lang_id][id];
    }
  else
    {
      return langs['en-us'][id];
    }
}
// Special version of langstr that returns the string in English-US.
// Used in the rare & special case when we can't lookup the user's preferred language.
function langstr_en(id)
{
  return langs["en-us"][id];
}

// checkForMissingTranslations: Used for testing purposes only, before publishing a 
// new Add-on when a new language has been added.
function checkForMissingTranslations()
{  
  customLogClear();
  
  var en_translations = langs['en-us']; // dont' change
  
  for (var lang_to_check in langs)
    {
      customLog("checking " + lang_to_check);
      for (var en_str_to_check in en_translations)
        {
          //Logger.log("checking: " + en_str_to_check);
          if (!(en_str_to_check in langs[lang_to_check]))
            {
              customLog(lang_to_check + " is missing: " + en_str_to_check);
            }
        }
    }
}
