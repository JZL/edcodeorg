// File: email_grades.gas
// Description: 
// This file contains all relevant functions for emailing students their grades.

// emailGradesSetup: Displays the UI for the user to select emailing options.
function emailGrades()
 {
   var ss = SpreadsheetApp.getActiveSpreadsheet();
  
   var grades_sheet = getSheetWithGrades(ss);  
   if (grades_sheet == null)
     {
       Browser.msgBox("Flubaroo Notification",
                      "Flubaroo cannot email grades for this assignment "
                      + "because there is no sheet named " + gbl_grades_sheet_name
                      + " present. Please grade the assignment before "
                      + " continuing.",
                      Browser.Buttons.OK);
       return;
     }
 
   var app = createEmailGradesUI(ss);
   ss.show(app);   
 }
 
 function createEmailGradesUI(sheet)
 {
   customLogClear();
   
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   
   var app = UiApp.createApplication().setTitle('Flubaroo - Email Grades')
                                      .setWidth("400").setHeight("520");
 
   var gws = new GradesWorksheet(ss, INIT_TYPE_GRADED_META);

   // Declare the handler that will be called when the 'Continue' or 'Cancel'
   // buttons are clicked.
   var handler = app.createServerClickHandler('emailGradesHandler');
   var click_handler = app.createServerClickHandler('continueButtonClickHandler');
   var show_questions_value_change_handler = app.createServerChangeHandler('showQuestionsValueChangeHandler');
   
   var email_addr = Session.getActiveUser().getEmail();
   var email_addr_field = app.createHidden("email_addr", email_addr)
                                .setId("email_addr").setName("email_addr");
                              
   var hidden_vars = app.createVerticalPanel().setVisible(false);
   hidden_vars.add(email_addr_field);
   handler.addCallbackElement(email_addr_field);
 
    // create the main panel to hold all content in the UI for this step.
   var main_panel = app.createVerticalPanel()
                       .setStyleAttribute('border-spacing', '10px');
         
   // add a top level hpanel for instructions and picture
   var hpanel = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '10px')
       .add(app.createImage(FLUBAROO_WELCOME_IMG_URL))
       .add(app.createLabel(EMAIL_GRADES_INSTRUCTIONS)
            .setStyleAttribute('margin-top', '5px'));
   main_panel.add(hpanel);
 
   // create a pull-down box containing all the questions which identify a
   // student. 
   var lbox_name = "email_ques_index";
   var lbox = app.createListBox(false).setId(lbox_name).setName(lbox_name);
   var position = -1;
   
   var graded_subm = gws.getFirstGradedSubmission();
   var qi = 0;
   var position = -1;

   for (var q = graded_subm.getFirstQuestion(); q != null; q = graded_subm.getNextQuestion(q))
     {
       var gopt = q.getGradingOption();
       var ques_val = q.getFullQuestionText(); // to do: abbreviate
  
       if (gopt == GRADING_OPT_STUD_ID)
         {
           lbox.addItem(ques_val, String(qi));
           position++;

           if (quesContainsEmail(ques_val))
             {       
               lbox.setSelectedIndex(position); 
             }
         }
       qi++;
     }
        
   var hpanel2 = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '6px')
       .add(app.createLabel("Email Address Question: "))
       .add(lbox);
   main_panel.add(hpanel2);
   
   var cbox_name = "show_questions";
   var cbox = app.createCheckBox().setId(cbox_name).setName(cbox_name)
                                  .setValue(true)
                                  .addValueChangeHandler(show_questions_value_change_handler);
   var hpanel3 = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '6px')
       .add(app.createLabel("Include List of Questions and Scores: "))
       .add(cbox);
   main_panel.add(hpanel3);
 
   // depends on above being checked
   var cbox2_name = "show_answers";
   var cbox2 = app.createCheckBox().setId(cbox2_name).setName(cbox2_name);
   var hpanel4 = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '6px')
       .add(app.createLabel("Include Answer Key: "))
       .add(cbox2);
   main_panel.add(hpanel4);
 
   var textbox_name = "instructor_message";
   var tbox = app.createTextArea().setId(textbox_name).setName(textbox_name)
                                 .setWidth('350').setHeight('100');
   var hpanel4 = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '6px')
       .add(app.createLabel("Message To Include in Email (optional):"))
   main_panel.add(hpanel4);
   
   var hpanel5 = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '6px')
       .add(tbox);
   main_panel.add(hpanel5);
 
   // make selections available in handler.
   handler.addCallbackElement(lbox);
   handler.addCallbackElement(cbox);
   handler.addCallbackElement(cbox2);
   handler.addCallbackElement(tbox);
 
   // add the Continue and Cancel buttons at the bottom.
   var btnGrid = app.createGrid(1, 3).setStyleAttribute('float', 'right');
   var btnSubmit = app.createButton('Continue',handler).setId('CONTINUE')
                                                       .addClickHandler(click_handler);
 
   btnGrid.setWidget(0,1,btnSubmit);
   //btnGrid.setWidget(0,2,app.createButton('Cancel',handler).setId('CANCEL'));
   btnGrid.setWidget(0,0,app.createImage(FLUBAROO_WORKING_IMG_URL).setVisible(false).setId('working'));
 
   main_panel.add(btnGrid);
   
   app.add(main_panel);
   return app;
 }
   

 
 function showQuestionsValueChangeHandler(e)
 {
   var app = UiApp.getActiveApplication();
   
   var sa_cbox = app.getElementById('show_answers');
   var new_value = e.parameter.show_questions;
   
   if (new_value == 'true')
     {
       sa_cbox.setEnabled(true);
     }
   else
     {
       sa_cbox.setValue(false);
       sa_cbox.setEnabled(false);
     }

   return app;
 }

 function emailGradesHandler(e)
 {
   var app = UiApp.getActiveApplication();
   
   var source = e.parameter.source;
  
   if (source == 'CANCEL')
     {
       app.close();
       return app;
     }
   
   var ss = SpreadsheetApp.getActiveSpreadsheet();
   
   var gws = new GradesWorksheet(ss, INIT_TYPE_GRADED_FULL);
 
   var email_ques_index = e.parameter.email_ques_index;
   var show_answers = e.parameter.show_answers;
   var instructor_message = e.parameter.instructor_message;
   var show_questions = e.parameter.show_questions;
   
   var user_email_addr = e.parameter.email_addr;
   
   var assignment_name = ss.getName();
 
   // remove any HTML formatting from the instructor's message
   instructor_message = instructor_message.replace("<", "&lt;");
   instructor_message = instructor_message.replace(">", "&gt;");
   
   var msg_title = 'Here is your grade for "' + assignment_name + '"';
   var msg_body = "";
                   
   var num_emails_sent = 0;
   var num_emails_unsent = 0;
   
   customLog("sending emails");
   for (var graded_subm = gws.getFirstGradedSubmission(); graded_subm != null; 
            graded_subm = gws.getNextGradedSubmission())
     {
       // pull the email address for this submission
       var q = graded_subm.getQuestionByIndex(email_ques_index);
       var email_address = q.getGradedVal(); // pull from Graded vals, incase teacher wants to edit.
   
       if (!isValidEmailAddress(email_address) || (graded_subm.getAlreadyEmailed() != ""))
           {
             num_emails_unsent += 1;
             continue;
           }
       
        msg_body = constructGradesEmailBody(assignment_name,
                                            gws.getPointsPossible(),
                                            show_questions,
                                            show_answers,
                                            instructor_message,
                                            graded_subm); // grading options
           
       try
         {
           MailApp.sendEmail(email_address, msg_title, "",
                             {htmlBody: msg_body, noReply: true, name: "Flubaroo Grader"});
           num_emails_sent += 1;
         }
       catch (exception)
          {
           // just ignore malformed emails, or email errors.
           num_emails_unsent += 1;
          }
       
       graded_subm.recordEmailSentInGradesSheet();
     }
   
   app.close();
   
   if (num_emails_sent > 0)
     {
       // send the instructor a brief email, so they have a record of having emailed the grades
       msg_title = 'Record of grades emailed for assignment ' + assignment_name;
       msg_body = "<html><body><p>Grades for your assigment <b>";
       msg_body += '<a href="' + ss.getUrl() + '">' + assignment_name + "</a></b>";
       msg_body += " were just emailed to <b>" + num_emails_sent + "</b> students.</p>";
       msg_body += "<p>The were a total of <b>" + gws.getNumGradedSubmissions() + "</b> graded submissions,";
       msg_body += " with an average score of <b>" + gws.getAverageScore() + "</b> out of a possible ";
       msg_body += "<b>" + gws.getPointsPossible() + "</b> points.</p>";
       msg_body += "<p>An answer key was ";
       if (show_answers != 'true')
         {
           msg_body += 'not ';
         }
       msg_body += "included.</p>";
       if (instructor_message != "")
       {
         msg_body += "<p>You also included this message:<br><br>";
         msg_body += '<div style="padding-left:10px;width:60%;border:1px solid gray;">'; 
         msg_body += "<pre>" + instructor_message + "</pre></p></div>";
       }
       msg_body += "</body></html>";
        
       MailApp.sendEmail(user_email_addr, msg_title, "",
                         {htmlBody: msg_body, noReply: true, name: "Flubaroo Grader"});
       
       logEmail();
       
       var email_notification = "Grades were successfully emailed to " + num_emails_sent + " students."; 
       if (num_emails_unsent > 0) 
         { 
           email_notification += " Grades were not sent to another " + num_emails_unsent + " students, due to invalid or blank email addresses, "
                              + "or because they have already been emailed their grades."; 
         } 
       Browser.msgBox("Flubaroo Notification", email_notification, 
                      Browser.Buttons.OK);   
     }
   else
     {
       Browser.msgBox("Flubaroo Notification",
                      "No grades were emailed because no valid email addresses were found, or because all students have already been emailed their grades.",
                      Browser.Buttons.OK);
     }
   
   return app;
 }
   
 function isValidEmailAddress(email_address)
 {
   if (typeof email_address != 'string')
     {
       email_address = email_address.toString();
     }
   
   if (email_address.indexOf(' ') != -1)
     {
       // no spaces
       return false;
     }
   if (email_address.indexOf('@') != -1)
     {
       // needs at '@'
       return true;
     }
   
   return false;
 }
   

function constructGradesEmailBody(assignment_name,
                                  points_possible,
                                  show_questions,
                                  show_answers,
                                  instructor_message,
                                  graded_subm)
{   
  var msg_body = '<html><body bgcolor="white">';
   
  msg_body += '<p>This email contains your grade '
               + 'for <b>'
               + assignment_name + '</b>. Do not reply to this email.</p>';
   
  msg_body += '<div style="padding-left:10px;display:inline-block;border:1px solid black;">'; 
  msg_body += "<h2>Your Grade: <b>" + graded_subm.getScorePoints() + " / " + points_possible + " points&nbsp;&nbsp;</h2></b></div>";

  if (instructor_message != "")
     {
       msg_body += '<br><br>';
       msg_body += 'Below is a message from your instructor:<br><br>';
       msg_body += '<div style="padding-left:10px;width:60%;border:1px solid gray;">';
       msg_body +=  "<pre>" + instructor_message + "</pre>";
       msg_body += "</div>";
     }
  
  msg_body += "<br><p>Summary of your submission: "
  
  msg_body += "<table border=0 cellspacing=12 width=80%>";
  for (var q = graded_subm.getFirstQuestion(); q != null; q = graded_subm.getNextQuestion(q))
    {
      if (q.getGradingOption() == GRADING_OPT_STUD_ID)
        {
          msg_body += "<tr><td>"
                      + q.getFullQuestionText() + "</td><td>"
                      + "<b>" + q.getFullSubmissionText() + "</b></td></tr>";
        }
    }
  
  msg_body += "<tr><td>"
               + gbl_lbl_subm_time + "</td><td>"
               + "<b>" + graded_subm.getTimestamp() + "</b></td></tr>";
  msg_body += "</table>";  
  msg_body += "</p>"; 
  
  if (show_questions == 'true')
    {  
      msg_body += "<p>Below is your score for each question"
 
      if (show_answers == 'true')
        {
          msg_body += ", along with the correct answer:</p>";
        }
      else
        {
          msg_body += ":</p>";
        }
      
      msg_body += '<table border=1 width="80%">';
   
      msg_body += "<tr><td><b>Question</b></td>";
   
      msg_body += "<td><b>Your Answer</b></td>";

      if (show_answers == 'true')
        {
          msg_body += "<td><b>Correct Answer</b></td>";
        }
   
      msg_body += "<td><b>Your Score</b></td>"
                  + "<td><b>Points Possible</b></td></tr>";
      
      var bgcolor_red = "#e05252";
      var bgcolor_green = "#00ee55";
      var bgcolor_gray = "#c0c0c0";
      var bgcolor;
      var c;
   
      for (var q = graded_subm.getFirstQuestion(); q != null; q = graded_subm.getNextQuestion(q))
        {
          if (q.isTimestamp())
            {
              continue;
            }
          
          var gopt = q.getGradingOption();
      
          if (gopt != GRADING_OPT_STUD_ID)
            {
              if (gopt == GRADING_OPT_SKIP)
                {
                  bgcolor = bgcolor_gray;
                }
              else if (q.getGradedVal() == 0)
                {
                  bgcolor = bgcolor_red;
                } 
              else
                {
                  bgcolor = bgcolor_green;
                }
           
              msg_body += "<tr>";
              msg_body += '<td bgcolor="' + bgcolor + '">' + q.getFullQuestionText() + "</td>";
         
              msg_body += '<td bgcolor="' + bgcolor + '">' + q.getFullSubmissionText() + "</td>";
        
              if (show_answers == 'true')
                {
                  msg_body += '<td bgcolor="' + bgcolor + '">' + q.getAnswerKeyText() + "</td>";
                }
       
              if (gopt == GRADING_OPT_SKIP)
                {
                  msg_body += '<td bgcolor="' + bgcolor + '"></td>';
                  msg_body += '<td bgcolor="' + bgcolor + '">' + gbl_grading_opt_skip + "</td>";
                }
              else
                {
                  msg_body += '<td bgcolor="' + bgcolor + '">' + q.getGradedVal() + "</td>";
                  msg_body += '<td bgcolor="' + bgcolor +'">' + getPointsWorth(gopt) + "</td>";
                }
              msg_body += "</tr>";
            }
        }
     
      msg_body += "</table><br>";
    } 
   
   msg_body += '<p><b>This email was generated by <a href="http://www.flubaroo.com">Flubaroo</a>, a free tool for grading and assessments.</b></p>';
   
   msg_body += "</body></html>";
   return msg_body;
}

function quesContainsEmail(ques_txt)
{
  ques_txt = ques_txt.toLowerCase();

  if (ques_txt.indexOf('email') != -1)
    {
      return true;
    }
  
  if (ques_txt.indexOf('e-mail') != -1)
    {
      return true;
    }
  
  return false;
}
